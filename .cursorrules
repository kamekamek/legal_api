# Legal API Project Rules

## プロジェクト構造
```
legal_api/
├── frontend/              # Viteフロントエンド
│   ├── src/
│   │   ├── features/     # 機能モジュール
│   │   ├── components/   # 共通コンポーネント
│   │   ├── services/     # APIサービス
│   │   ├── routes/       # ルーティング
│   │   ├── hooks/        # カスタムフック
│   │   ├── config/       # 設定ファイル
│   │   ├── constants/    # 定数定義
│   │   ├── assets/       # 静的ファイル
│   │   ├── tests/        # テストファイル
│   │   └── utils/        # ユーティリティ関数
│   ├── public/           # 静的ファイル
│   └── docs/             # フロントエンド関連ドキュメント
├── backend/              # Expressバックエンド
│   ├── src/             # ソースコード
│   ├── config/          # 設定ファイル
│   ├── scripts/         # ユーティリティスクリプト
│   ├── tests/           # ユニットテスト
│   └── e2e/             # E2Eテスト
├── docs/                # プロジェクト全体のドキュメント
│   └── archive/         # 過去のドキュメント
├── scripts/             # プロジェクト全体のスクリプト
├── .github/             # GitHub関連設定
└── src/                 # 共通ソースコード
```

## ドキュメント参照
- プロジェクト全体の状況: `docs/project-status.md`
- API仕様: `docs/api-spec.md`
- フロントエンドガイド: `frontend/docs/`
- バックエンドガイド: `backend/docs/`

## コーディング規約

### 全般
- インデント: 2スペース
- 文字コード: UTF-8
- 改行コード: LF
- ファイル末尾: 空行1行

### フロントエンド（React）
- コンポーネント命名: PascalCase
- ファイル命名: PascalCase.tsx
- スタイル: CSS Modules（`.module.css`）
- テスト: `.test.jsx` or `.test.js`
- 機能モジュール構造:
  ```
  features/
  └── 機能名/
      ├── components/     # 機能固有のコンポーネント
      ├── hooks/         # 機能固有のフック
      ├── services/      # API通信
      └── utils/         # ユーティリティ
  ```

### バックエンド（Express）
- ファイル命名: snake_case
- APIエンドポイント: kebab-case
- テストファイル: `*.test.js`
- 環境設定:
  - 開発: `.env`
  - テスト: `.env.test`

## Cursor設定

### コンテキスト優先度
1. `docs/project-status.md` - プロジェクト全体の状況
2. 各機能のドキュメント（`docs/archive/`）
3. 実装コード
4. テストコード

### 自動補完設定
- React Hooks
- Express middleware
- Material-UI components
- Testing Library
- TypeScript型定義

### コード生成ルール
- コンポーネントテンプレート
  - Propsの型定義
  - エラーハンドリング
  - テストファイル
- APIエンドポイント
  - バリデーション
  - エラーレスポンス
  - OpenAPI仕様
- 機能モジュール
  - index.jsエクスポート
  - 型定義ファイル

### リンター・フォーマッター
- ESLint
- Prettier
- TypeScript（`.ts`, `.tsx`）

## Git運用
- ブランチ命名規則:
  - 機能開発: `feature/機能名`
  - バグ修正: `fix/issue番号`
  - リファクタリング: `refactor/対象`
- コミットメッセージ形式:
  ```
  type(scope): 内容

  詳細な説明（必要な場合）
  ```
  - type: feat, fix, docs, style, refactor, test, chore
  - scope: frontend, backend, docs, etc.

## 注意事項
- APIキーなどの機密情報は`.env`ファイルで管理
- 新機能の追加時は`docs/project-status.md`を更新
- テストカバレッジ目標: 80%以上
- パフォーマンス基準:
  - ページロード: 3秒以内
  - APIレスポンス: 1秒以内
- 依存関係の更新:
  - パッケージの更新は定期的に実施
  - メジャーバージョンの更新は慎重に検討

# プロジェクト設定
PROJECT_TYPE=vite
FRONTEND_FRAMEWORK=react
UI_FRAMEWORK=tailwindcss
DATABASE=supabase
NODE_VERSION=18.x

# ディレクトリ構造
```
legal_api/
├── frontend/              # Viteフロントエンド
│   ├── src/
│   │   ├── features/     # 機能モジュール
│   │   ├── components/   # 共通コンポーネント
│   │   ├── services/     # APIサービス
│   │   ├── routes/       # ルーティング
│   │   ├── hooks/        # カスタムフック
│   │   ├── config/       # 設定ファイル
│   │   ├── constants/    # 定数定義
│   │   ├── assets/       # 静的ファイル
│   │   ├── tests/        # テストファイル
│   │   └── utils/        # ユーティリティ関数
│   ├── public/           # 静的ファイル
│   └── docs/             # フロントエンド関連ドキュメント
└── docs/                 # プロジェクト全体のドキュメント

# 技術スタック
- フロントエンド: React + TypeScript + Vite
- UIフレームワーク: TailwindCSS
- データベース: Supabase
- 状態管理: React Query
- ルーティング: React Router
- テスト: Vitest + Testing Library
- コード品質: ESLint + Prettier

# 開発環境
- Node.js: 18.x
- パッケージマネージャー: pnpm
- エディタ: VSCode

# 必要な環境変数
VITE_SUPABASE_URL=your_supabase_url
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key

# ルーティング設定
- /                       # ホーム
- /projects              # プロジェクト一覧
- /projects/:id          # プロジェクト詳細
- /zone-search/:id       # 用途地域検索

# コンポーネント命名規則
- コンポーネント: PascalCase
- ファイル: PascalCase.tsx
- フック: camelCase (use prefix)
- ユーティリティ: camelCase

# スタイリング規則
- TailwindCSSクラス名の順序:
  1. レイアウト (display, position)
  2. スペーシング (margin, padding)
  3. サイズ (width, height)
  4. 見た目 (colors, borders)
  5. その他

# APIエンドポイント
- GET /api/projects/:id
- GET /api/projects/:id/legal-info
- POST /api/projects/:id/legal-info
- GET /api/zone-search?address=:address
